カルマンフィルタは、状態推定やノイズのある観測データを基にシステムの内部状態を推定するために広く使用されるアルゴリズムです。以下は、カルマンフィルタで必要な基本的な数式を列挙します。

### 1. **システムモデル**

カルマンフィルタは、線形システムにおいて次の2つのモデルを前提としています。

#### a. **状態遷移モデル（State Transition Model）**
システムの次の状態は、現在の状態とコントロール入力（必要な場合）の線形関数です。状態方程式は次のように表されます。

\[
x_k = A x_{k-1} + B u_k + w_k
\]

- \( x_k \): 時刻 \(k\) における状態ベクトル
- \( A \): 状態遷移行列
- \( B \): コントロール入力行列
- \( u_k \): コントロール入力ベクトル
- \( w_k \): プロセスノイズ（通常は平均0のガウス分布で、共分散 \( Q \) を持つ）  
  \( w_k \sim N(0, Q) \)

#### b. **観測モデル（Measurement Model）**
システムの観測（測定値）は、状態の線形関数として得られます。

\[
z_k = H x_k + v_k
\]

- \( z_k \): 観測ベクトル
- \( H \): 観測行列
- \( v_k \): 観測ノイズ（通常は平均0のガウス分布で、共分散 \( R \) を持つ）  
  \( v_k \sim N(0, R) \)

### 2. **カルマンフィルタの手順**

カルマンフィルタは、予測（Prediction）と更新（Update）の2つのステップで実行されます。

#### a. **予測ステップ（Prediction Step）**

まず、システムの状態とその誤差共分散行列を時間更新します。

- **状態予測方程式**

\[
\hat{x}_k^- = A \hat{x}_{k-1} + B u_k
\]

  \(\hat{x}_k^-\): 時刻 \(k\) における事前状態推定（予測された状態）

- **誤差共分散行列の予測方程式**

\[
P_k^- = A P_{k-1} A^T + Q
\]

  \(P_k^-\): 時刻 \(k\) における事前誤差共分散行列（予測された共分散）

#### b. **更新ステップ（Update Step）**

予測された状態を観測データを用いて修正します。

- **カルマンゲインの計算**

\[
K_k = P_k^- H^T (H P_k^- H^T + R)^{-1}
\]

  \(K_k\): カルマンゲイン

- **状態更新方程式**

\[
\hat{x}_k = \hat{x}_k^- + K_k (z_k - H \hat{x}_k^-)
\]

  \(\hat{x}_k\): 修正後の状態推定

- **誤差共分散行列の更新方程式**

\[
P_k = (I - K_k H) P_k^-
\]

  \(P_k\): 修正後の誤差共分散行列

### 3. **初期条件**

カルマンフィルタを適用するためには、初期状態推定 \( \hat{x}_0 \) とその初期誤差共分散行列 \( P_0 \) を設定する必要があります。

---

これらの数式を順に使用して、システムの状態とその不確実性を反復的に推定していきます。カルマンフィルタはガウス分布を前提とした線形フィルタであり、状態推定に対して理論的に最適な結果を提供します。

アンサンブルカルマンフィルタ（Ensemble Kalman Filter, EnKF）は、標準のカルマンフィルタの拡張版で、特に非線形システムに対して適用できることが特徴です。標準のカルマンフィルタでは、状態と誤差共分散をガウス分布として表しますが、EnKFでは、状態空間を複数のサンプル（**アンサンブルメンバー**）で表し、その統計情報を使って推定を行います。

以下は、アンサンブルカルマンフィルタ（EnKF）の基本的な数式を列挙します。

### 1. **システムモデル**

アンサンブルカルマンフィルタも、システムの動作モデルと観測モデルに基づいています。これらは標準のカルマンフィルタと同じですが、状態ベクトルはアンサンブルメンバーとして表されます。

#### a. **状態遷移モデル**

\[
x_k^{(i)} = f(x_{k-1}^{(i)}) + w_k^{(i)}, \quad i = 1, 2, \dots, N
\]

- \( x_k^{(i)} \): アンサンブルメンバー \(i\) における時刻 \(k\) の状態
- \( f(x) \): 状態遷移関数（非線形な場合もある）
- \( w_k^{(i)} \): プロセスノイズ
- \( N \): アンサンブルの数

#### b. **観測モデル**

\[
z_k = h(x_k^{(i)}) + v_k
\]

- \( h(x) \): 観測関数（非線形な場合もある）
- \( z_k \): 観測ベクトル
- \( v_k \): 観測ノイズ

### 2. **アンサンブルカルマンフィルタの手順**

EnKFは以下のステップで動作します。

#### a. **アンサンブルメンバーの予測**

各アンサンブルメンバーの状態を予測します。

\[
x_k^{(i)} = f(x_{k-1}^{(i)}) + w_k^{(i)}, \quad i = 1, 2, \dots, N
\]

- \( f(x) \) は非線形でもよい。

#### b. **アンサンブル平均と誤差共分散の計算**

アンサンブルの平均と共分散を計算します。

- **アンサンブル平均**

\[
\bar{x}_k = \frac{1}{N} \sum_{i=1}^{N} x_k^{(i)}
\]

- **誤差共分散行列**

\[
P_k = \frac{1}{N - 1} \sum_{i=1}^{N} \left(x_k^{(i)} - \bar{x}_k\right)\left(x_k^{(i)} - \bar{x}_k\right)^T
\]

#### c. **カルマンゲインの計算**

次に、カルマンゲインをアンサンブルを基にして計算します。

- **予測された観測のアンサンブル**

\[
\hat{z}_k^{(i)} = h(x_k^{(i)})
\]

- **観測の共分散**

\[
P_{zz} = \frac{1}{N - 1} \sum_{i=1}^{N} \left(\hat{z}_k^{(i)} - \bar{z}_k\right)\left(\hat{z}_k^{(i)} - \bar{z}_k\right)^T
\]

- **状態と観測の共分散**

\[
P_{xz} = \frac{1}{N - 1} \sum_{i=1}^{N} \left(x_k^{(i)} - \bar{x}_k\right)\left(\hat{z}_k^{(i)} - \bar{z}_k\right)^T
\]

- **カルマンゲイン**

\[
K_k = P_{xz} P_{zz}^{-1}
\]

#### d. **アンサンブルの更新**

カルマンゲインを使って各アンサンブルメンバーを更新します。

\[
x_k^{(i)} = x_k^{(i)} + K_k \left( z_k + \varepsilon_k^{(i)} - \hat{z}_k^{(i)} \right), \quad i = 1, 2, \dots, N
\]

- \( \varepsilon_k^{(i)} \): 観測ノイズのサンプル

### 3. **初期条件**

- 初期の状態アンサンブル \( x_0^{(i)} \) を与えます。初期状態の平均と共分散に基づいてサンプルを生成します。

---

アンサンブルカルマンフィルタは、システムの状態をアンサンブル（多数のサンプル）として表すことで、非線形性に対処しつつ、カルマンフィルタの効率性を保ちます。これにより、大規模なシステムや非線形システムに対しても適用可能です。

VSCodeのMarkdownファイルに記入する際は、前述の方法でLaTeX形式の数式を使って記述できます。


1. **正規分布の再生性（係数付き）**  
   独立な正規分布に従う確率変数 \( X_i \sim N(\mu_i, \Sigma_i^2) \) と係数 \( a_i \) を用いた加重和 \( Z = \sum_{i=1}^{n} a_i X_i \) も正規分布に従います：

```latex
Z \sim N\left( \sum_{i=1}^{n} a_i \mu_i, \sum_{i=1}^{n} a_i^2 \Sigma_i^2 \right)
```

2. **正規分布の条件付き分散**  
   2変数正規分布の条件付き分散を行列形式で表すと：

```latex
\text{Var}(X_1 | X_2) = \Sigma_{11} - \Sigma_{12} \Sigma_{22}^{-1} \Sigma_{21}
```

この2つをまとめた形になります。